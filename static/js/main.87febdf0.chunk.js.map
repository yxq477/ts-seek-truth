{"version":3,"sources":["paper/question.tsx","paper/choice.tsx","paper/answer.tsx","paper/paper.tsx","serviceWorker.ts","index.tsx"],"names":["Question","className","Choice","props","choosedAnswer","value","onClick","click","type","name","id","label","answers","Answer","state","console","log","this","setState","map","answer","key","handleChooseAnswer","React","Component","Paper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNAUeA,MARf,WACE,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,gBAAf,oI,4BCSSC,MAZf,SAAgBC,GACd,OACE,yBACAF,UAAW,6BAA+BE,EAAMC,gBAAkBD,EAAME,OAAS,WACjFC,QAAS,kBAAKH,EAAMI,MAAMJ,EAAME,SAC/B,2BAAOG,KAAK,WAAWC,KAAK,GAAGC,GAAG,KAHnC,eAG0CP,EAAME,MAHhD,SAIC,6BACCF,EAAMQ,QCNNC,EAAU,CAAC,CAAED,MAAO,UAAWN,MAAO,KAAO,CAAEM,MAAO,UAAWN,MAAO,KAAO,CAAEM,MAAO,UAAWN,MAAO,KAAO,CAAEM,MAAO,UAAWN,MAAO,MAgCnIQ,E,kDA3Bb,WAAYV,GAAa,IAAD,8BACtB,cAAMA,IACDW,MAAQ,CACXV,cAAe,KAHK,E,+DAMLC,GACjBU,QAAQC,IAAIX,GACZY,KAAKC,SAAS,CAAEd,cAAeC,M,+BAGvB,IAAD,OACP,OACE,yBAAKJ,UAAU,eAEXW,EAAQO,KAAI,SAAAC,GAAM,OAChB,kBAAC,EAAD,CAAQC,IAAKD,EAAOf,MAClBD,cAAe,EAAKU,MAAMV,cAC1BG,MAAO,SAACa,GAAD,OAAiB,EAAKE,mBAAmBF,IAChDf,MAAOe,EAAOf,MACdM,MAAOS,EAAOT,gB,GArBPY,IAAMC,WCSZC,MAXf,WACE,OACE,yBAAKxB,UAAU,qBACb,yBAAKA,UAAU,wBAAf,qBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQA,UAAU,2BAAlB,oCCCcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.87febdf0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Question() {\n  return (\n    <div className=\"question card\">\n      <div className=\"primary-text\">欢迎 Question欢迎 Question欢迎 Question欢迎 Question欢迎 Question欢迎 Question</div>\n    </div>\n  );\n}\n\nexport default Question;","import React from 'react';\n\nfunction Choice(props:any) {\n  return (\n    <div \n    className={'primary-text choice-item ' + (props.choosedAnswer === props.value && 'choosed')}\n    onClick={()=> props.click(props.value)}> \n     <input type=\"checkbox\" name=\"\" id=\"\"/>选项{props.value}：\n     <br/>\n     {props.label}\n    </div>\n  );\n}\n\nexport default Choice;","import React from 'react';\nimport Choice from './choice'\n// const answerValue = 'ABCDEFGH'.split('')\nconst answers = [{ label: 'A123456', value: 'A' }, { label: 'B123456', value: 'B' }, { label: 'C123456', value: 'C' }, { label: 'D123456', value: 'D' },]\nclass AnswerState {\n  choosedAnswer: string = ''\n}\nclass Answer extends React.Component<{}, AnswerState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      choosedAnswer: 'A'\n    }\n  }\n  handleChooseAnswer(value: string) {\n    console.log(value);\n    this.setState({ choosedAnswer: value })\n    // props.chooseAnswer(value)\n  }\n  render() {\n    return (\n      <div className=\"answer card\">\n        {\n          answers.map(answer =>\n            <Choice key={answer.value}\n              choosedAnswer={this.state.choosedAnswer}\n              click={(answer:string)=>this.handleChooseAnswer(answer)}\n              value={answer.value}\n              label={answer.label}>\n            </Choice>\n          )}\n      </div>\n    );\n  }\n}\nexport default Answer;","import React from 'react';\nimport './paper.css'\nimport Question from './question'\nimport Answer from './answer'\n\nfunction Paper() {\n  return (\n    <div className=\"paper first-color\">\n      <div className=\"welcome primary-text\">欢迎paper</div>\n      <Question></Question>\n      <Answer />\n      <button className=\"backward secondary-text\">回到上一题</button>\n    </div>\n  );\n}\n\nexport default Paper;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Paper from './paper/paper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Paper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}